/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
void delay(void)
{
	for(uint32_t i =0 ; i < 300000 ; i++);

}

int main(void)
{
	// Peripheral Register Address; PB 1-4 input mode; PB 12-15 output mode

	uint32_t volatile *const pGPIOBModeReg = (uint32_t*)(0x40020400);
	uint32_t volatile *const pInPutDataReg = (uint32_t*)(0x40020400+0x10);
	uint32_t volatile *const pOutPutDataReg = (uint32_t*)(0x40020400+0x14);
	uint32_t volatile *const pClockCtrlReg = (uint32_t*)(0x40023800+0x30);
	uint32_t volatile *const pPullUpDownReg = (uint32_t*)(0x40020400+0x0C);

	//Enable the peripheral clock of GPIOB PERIPHERAL
	*pClockCtrlReg |= (1<<2);

	// configure PB0, PB1, pb2, pb3 as output(rows)
	*pGPIOBModeReg &=~(0xFF); //clear
	*pGPIOBModeReg |= 0x55;  //set

	// Configure PB12 - 15 as input(columns)
	*pGPIOBModeReg &= ~(0xFF<<24); //set zero for input mode
		  //set

	// enable internal pull up resistor for PB12-PB15
	*pPullUpDownReg &= ~(0xFF<<24);
	*pPullUpDownReg |= (0xFF<<24);
while(1){
// step make all  rows high
	*pOutPutDataReg |= 0x0f;

	// make PB0 LOW(R1)
	*pOutPutDataReg &= ~(0x1<<0);

	// scan the column

	//check C1(PB12) LOW OR HIGH
	if(!(*pInPutDataReg & (1<<12))){
		//key is pressed
		delay();
		printf("1\n");
	}

	//check C2(PB13) LOW OR HIGH
		if(!(*pInPutDataReg & (1<<13))){
			//key is pressed
			delay();
			printf("2\n");
			}
		//check C3(PB14) LOW OR HIGH
				if(!(*pInPutDataReg & (1<<14))){
					//key is pressed
					delay();
					printf("3\n");
					}
				//check C4(PB15) LOW OR HIGH
				if(!(*pInPutDataReg & (1<<15))){
					//key is pressed
					delay();
					printf("A\n");}


// make all  rows high
    *pOutPutDataReg |=0x0f;
// make PB1 LOW(R2)
	*pOutPutDataReg &= ~(0x1<<1);
	//check C1(PB12) LOW OR HIGH
		if(!(*pInPutDataReg & (1<<12))){
			//key is pressed
			delay();
			printf("4\n");
		}

	//check C2(PB13) LOW OR HIGH
	     if(!(*pInPutDataReg & (1<<13))){
				//key is pressed
				delay();
				printf("5\n");
				}
			//check C3(PB14) LOW OR HIGH
					if(!(*pInPutDataReg & (1<<14))){
						//key is pressed
						delay();
						printf("6\n");
						}
					//check C4(PB15) LOW OR HIGH
					if(!(*pInPutDataReg & (1<<15))){
						//key is pressed
						delay();
						printf("B\n");}

					//make all rows HIGH
					     *pOutPutDataReg |= 0x0f;
					    //make R3 LOW(PD2)
					    *pOutPutDataReg &= ~( 1 << 2);

					    //scan the columns
					    //check C1(PD8) low or high
					    if(!(*pInPutDataReg & ( 1 << 8))){
					    	//key is pressed
					    	delay();
					    	printf("7\n");
					    }

					    //check C2(PD9) low or high
					    if(!(*pInPutDataReg & ( 1 << 9))){
					    	//key is pressed
					    	delay();
					    	printf("8\n");
					    }

					    //check C3(PD10) low or high
					    if(!(*pInPutDataReg & ( 1 << 10))){
					    	//key is pressed
					    	delay();
					    	printf("9\n");
					    }

					    //check C4(PD11) low or high
					    if(!(*pInPutDataReg & ( 1 << 11))){
					    	//key is pressed
					    	delay();
					    	printf("C\n");
					    }

					    //make all rows HIGH
					     *pOutPutDataReg |= 0x0f;
					    //make R4 LOW(PD2)
					    *pOutPutDataReg &= ~( 1 << 3);

					    //scan the columns
					    //check C1(PD8) low or high
					    if(!(*pInPutDataReg & ( 1 << 8))){
					    	//key is pressed
					    	delay();
					    	printf("*\n");
					    }

					    //check C2(PD9) low or high
					    if(!(*pInPutDataReg & ( 1 << 9))){
					    	//key is pressed
					    	delay();
					    	printf("0\n");
					    }

					    //check C3(PD10) low or high
					    if(!(*pInPutDataReg & ( 1 << 10))){
					    	//key is pressed
					    	delay();
					    	printf("#\n");
					    }

					    //check C4(PD11) low or high
					    if(!(*pInPutDataReg & ( 1 << 11))){
					    	//key is pressed
					    	delay();
					    	printf("D\n");
					    }

					}//while end

					}
